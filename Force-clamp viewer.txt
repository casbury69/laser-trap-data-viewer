#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3				// Use modern global access method and strict wave access
#pragma DefaultTab={3,20,4}		// Set default tab width in Igor Pro 9 and later 

//---------------------------------------------------------------------------------------------------------------
// builds panel to scroll through force-clamp recordings

Window fc_viewer() : Panel
	PauseUpdate; Silent 1		// building window...
	NewPanel /W=(97,294,289,437) as "Force Clamp Viewer"
	ModifyPanel cbRGB=(49151,60031,65535)
	ShowTools/A
	PopupMenu fbin,pos={31.00,52.00},size={128.00,17.00},proc=fbin_proc
	PopupMenu fbin,title="Force bin"
	PopupMenu fbin,mode=7,popvalue="7: 10.3 - 18 pN",value=#"\"1: 0.69 - 1.94 pN;2: 1.94 - 2.97 pN;3: 2.97 - 3.999 pN;4: 3.999 - 5.98 pN;5: 5.98 - 7.99 pN;6: 7.99 - 10.3 pN;7: 10.3 - 18 pN\""
	Button NextTrace,pos={109.00,105.00},size={65.00,29.00},proc=NextTraceButton_FC
	Button NextTrace,title="Next Trace"
	SetVariable Trace_number,pos={23.00,24.00},size={143.00,19.00}
	SetVariable Trace_number,title="Recording number"
	SetVariable Trace_number,limits={0,84,1},value=recording_number[0]
	CheckBox markpause,pos={40.00,79.00},size={84.00,16.00},title="Mark pauses?"
	CheckBox markpause,wave=mark_pauses[0]
	Button PreviousTrace,pos={16.00,105.00},size={85.00,29.00},proc=PreviousTraceButton_FC
	Button PreviousTrace,title="Previous Trace"
EndMacro

//----------------------------------------------------------------------------------------------------------------
// sets the force bin based on what the user sets in the panel

Function fbin_proc(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName
	variable popnum
	String popstr
	
	make/o/n=(1) desired_fbin,recording_number,time_limit,event_num,file_num
	make/o/n=(1) mark_pauses 
		// control panel checkbox to say whether to mark pauses (1) or not (0)
			
	if(cmpstr(popstr, "1: 0.69 - 1.94 pN") == 0) // bin 1
		desired_fbin[0] = 1
	elseif(cmpstr(popstr, "2: 1.94 - 2.97 pN") == 0) // bin 2
		desired_fbin[0] = 2
	elseif(cmpstr(popstr, "3: 2.97 - 3.999 pN") == 0)
		desired_fbin[0] = 3
	elseif(cmpstr(popstr, "4: 3.999 - 5.98 pN") == 0)
		desired_fbin[0] = 4
	elseif(cmpstr(popstr, "5: 5.98 - 7.99 pN") == 0)
		desired_fbin[0] = 5
	elseif(cmpstr(popstr, "6: 7.99 - 10.3 pN") == 0)
		desired_fbin[0] = 6
	elseif(cmpstr(popstr, "7: 10.3 - 18 pN") == 0)
		desired_fbin[0] = 7
	endif
end

//------------------------------------------------------------------------------------------------------------------
// Button to increase the recording number by 1 and display the selected recording

Function NextTraceButton_FC(ctrlName) : ButtonControl
  String ctrlName
  NextTrace_FC()
End

//------------------------------------------------------------------------------------------------------------------
// Button to decrease the recording number by 1 and display the selected recording

Function PreviousTraceButton_FC(ctrlName) : ButtonControl
  String ctrlName
  PreviousTrace_FC()
End

//------------------------------------------------------------------------------------------------------------------
// Increases the recording number by 1 and displays the selected recording

Function NextTrace_FC()
	variable j,k
	variable i = 0
	variable counter = 0
	wave time_limit,mark_pauses,event_num,file_num
	wave desired_fbin,recording_number,force,num_in_bin,bb_bb,tip_pos
	wave/t filenames,term_translated
	
	if(recording_number[0] >= num_in_bin[(desired_fbin[0]-1)]) // if you are at the highest recording number in this force bin
		print("No more traces in this force bin")
	else
		recording_number[0] += 1
		doWindow/k/z TipPosition
		
		// goes through each of the traces to get to the one in the selected force bin and recording number
		do			
			if((force[i] > bb_bb[(desired_fbin[0]-1)][0]) && (force[i] < bb_bb[(desired_fbin[0]-1)][1]))
				// if the trace is at the desired force
				if(counter == (recording_number[0] - 1)) // if we're at the desired recording
					
					// redo force-clamp analysis
					remake_waves(i)
					reanalyze_fc_trace()	
					translate_term_FC()
					
					// display selected recording on the tip position graph
					wave sR,PauseTime,Ta,StartTime,CatTime 
						// sR: tip position, PauseTime: when pre-catastrophe pause starts,Ta: time in an assembly event
						// StartTime: when each event started, CatTime: when catastrophe starts
					make/o/n=(time_limit[0]/.005) timewave = x*.005 // max value for the x-axis
					display	sR vs timewave
					
					// sets coordinates for catastrophe and pre-castastrophe pause
					if(numtype(PauseTime[event_num[0]]) != 2) // pre-catastrophe pause exists
						make/o/n=(1) p_point,p_time,c_point,c_time
						c_point[0] = sR[(CatTime[event_num[0]]-StartTime[event_num[0]])/.005]
						c_time[0] = CatTime[event_num[0]]-StartTime[event_num[0]]
						if(numtype(Ta[event_num[0]]) != 2) 
						// assembly event exists so the pre-catastrophe pause happens at the end of the assembly event
							p_point[0] = sR[Ta[event_num[0]]/.005] 
							p_time[0] = Ta[event_num[0]]
						else // pre-catastrophe pause happens at the beginning of the trace
							p_point[0] = sR[0]
							p_time[0] = 0
						endif
						
						// puts marked catastrophe and pre-catastrophe pause on tip position graph						
						appendtograph p_point vs p_time
						appendtograph c_point vs c_time
						ModifyGraph mode(p_point)=2,lsize(p_point)=4,rgb(p_point)=(16385,28398,65535)
						ModifyGraph mode(c_point)=2,lsize(c_point)=4,rgb(c_point)=(0,0,0)
					endif
					
					// labels tip position graph
					label bottom "Time [s]"
					label left "Tip postion [nm]"
					doWindow/C $"TipPosition"
					SetAxis bottom 0,(time_limit[0]*.005)
					TextBox/C/N=kappa/A=LT/X=1 /Y=0 filenames[file_num[0]] + "\rforce = " + num2str(force[i]) + " pN\rTermination: " + term_translated[0]
					
					// show any pauses marked on this trace if that's something you're into
					if(mark_pauses[0] == 1) // checked the box to say you were into pause marking
						remark_pauses(event_num[0],file_num[0])
					else // if you don't care about pauses you don't get to see the tip velocities
						doWindow/k/z TipVel
					endif
					break // end this loop when you get to the recording you want
				endif
				counter+=1 // we're on this recording number within the desired force bin
			endif
			i+=1 // check the next trace cause this one ain't it
		while (1)
	endif
end

//----------------------------------------------------------------------------------------------------------
// Decreases the recording number by 1 and displays the selected recording

Function PreviousTrace_FC()
	
	variable j,k
	variable i = 0
	variable counter = 0
	wave time_limit,mark_pauses,event_num,file_num
	wave desired_fbin,recording_number,force,num_in_bin,bb_bb,tip_pos
	wave/t filenames,term_translated
	
	if(recording_number[0] == 1) // if you are at the lowest recording number in this force bin (1)
		print("Recording #1 is the first recording in this bin")
	else
		recording_number[0] -= 1
		doWindow/k/z TipPosition
		
		// goes through each of the traces to get to the one in the selected force bin and recording number
		do			
			if((force[i] > bb_bb[(desired_fbin[0]-1)][0]) && (force[i] < bb_bb[(desired_fbin[0]-1)][1]))
				// if the trace is at the desired force
				if(counter == (recording_number[0] - 1)) // if we're at the desired recording
					
					// redo force-clamp analysis
					remake_waves(i)
					reanalyze_fc_trace()	
					translate_term_FC()
					
					// display selected recording on the tip position graph
					wave sR,PauseTime,Ta,StartTime,CatTime 
						// sR: tip position, PauseTime: when pre-catastrophe pause starts,Ta: time in an assembly event
						// StartTime: when each event started, CatTime: when catastrophe starts
					make/o/n=(time_limit[0]/.005) timewave = x*.005 // max value for the x-axis
					display	sR vs timewave
					
					// sets coordinates for catastrophe and pre-castastrophe pause
					if(numtype(PauseTime[event_num[0]]) != 2) // pre-catastrophe pause exists
						make/o/n=(1) p_point,p_time,c_point,c_time
						c_point[0] = sR[(CatTime[event_num[0]]-StartTime[event_num[0]])/.005]
						c_time[0] = CatTime[event_num[0]]-StartTime[event_num[0]]
						if(numtype(Ta[event_num[0]]) != 2) 
						// assembly event exists so the pre-catastrophe pause happens at the end of the assembly event
							p_point[0] = sR[Ta[event_num[0]]/.005] 
							p_time[0] = Ta[event_num[0]]
						else // pre-catastrophe pause happens at the beginning of the trace
							p_point[0] = sR[0]
							p_time[0] = 0
						endif
						
						// puts marked catastrophe and pre-catastrophe pause on tip position graph						
						appendtograph p_point vs p_time
						appendtograph c_point vs c_time
						ModifyGraph mode(p_point)=2,lsize(p_point)=4,rgb(p_point)=(16385,28398,65535)
						ModifyGraph mode(c_point)=2,lsize(c_point)=4,rgb(c_point)=(0,0,0)
					endif
					
					// labels tip position graph
					label bottom "Time [s]"
					label left "Tip postion [nm]"
					doWindow/C $"TipPosition"
					SetAxis bottom 0,(time_limit[0]*.005)
					TextBox/C/N=kappa/A=LT/X=1 /Y=0 filenames[file_num[0]] + "\rforce = " + num2str(force[i]) + " pN\rTermination: " + term_translated[0]
					
					// show any pauses marked on this trace if that's something you're into
					if(mark_pauses[0] == 1) // checked the box to say you were into pause marking
						remark_pauses(event_num[0],file_num[0])
					else // if you don't care about pauses you don't get to see the tip velocities
						doWindow/k/z TipVel
					endif
					break // end this loop when you get to the recording you want
				endif
				counter+=1 // we're on this recording number within the desired force bin
			endif
			i+=1 // check the next trace cause this one ain't it
		while (1)
	endif
end

//-------------------------------------------------------------------------------------------------------
// Copies information from matrices for the selected event into 1-D vectors

function remake_waves(trace_number)
	variable trace_number // variable name for recording_number[0]
	variable i,j
	variable run_sum = 0// running sum of trace number to get the right one out of sX,sY, etc
	wave StartTime_mat,PauseTime_mat,CatTime_mat,EndTime_mat,Ta_mat,F_mat,sX_mat,sY_mat,bX_mat,bY_mat,file_events,event_num,file_num,kx_vec,ky_vec,term_mat
	
	make/o/n=(dimsize(StartTime_mat,0)) StartTime,PauseTime,CatTime,EndTime,Ta,F,term
	make/o/n=(dimsize(sX_mat,0)) sX,sY,bX,bY
	make/o/n=(1) kx,ky

	sX = nan
	sY = nan
	bX = nan
	bY = nan
	StartTime = nan
	PauseTime = nan
	CatTime = nan
	EndTime = nan
	Ta = nan
	F = nan
	kx = nan
	ky = nan
	term = nan
	
	for(i=0;i<dimsize(sX_mat,1);i++) // for each file
		run_sum += file_events[i] // make sure to run events_per_file() if you load new data!!
		if((trace_number+1) <= run_sum) // desired trace is in this file
			event_num[0] = (trace_number + 1 - run_sum + file_events[i])
			
			file_num[0] = i
			kx[0] = kx_vec[i]
			ky[0] = ky_vec[i]
			for(j=0;j<dimsize(sX_mat,0);j++) // for each timepoint
				if(numtype(sX_mat[j][i]) != 2)
					sX[j] = sX_mat[j][i]
					sY[j] = sY_mat[j][i]
					bX[j] = bX_mat[j][i]
					bY[j] = bY_mat[j][i]
				else
					break
				endif
			endfor
			
			for(j=0;j<dimsize(StartTime_mat,0);j++) // for each event
				StartTime[j] = StartTime_mat[j][i]
				EndTime[j] = EndTime_mat[j][i]
				PauseTime[j] = PauseTime_mat[j][i]
				CatTime[j] = CatTime_mat[j][i]
				Ta[j] = Ta_mat[j][i]
				F[j] = F_mat[j][i]
				term[j] = term_mat[j][i]
			endfor
			break
		endif		
	endfor
end


//---------------------
function remark_pauses(event_num,file_num)
	variable event_num
	variable file_num
	wave/t filenames
	wave StartTime,CatTime,PauseTime,EndTime
	variable time_interval = 2 // 2 second windows to calculate 'instantaneous' velocity
	wave Peak_0a_mat,Peak_1a_mat,Peak_0b_mat,Peak_1b_mat,Peak_0c_mat,Peak_1c_mat

	if(numtype(Peak_0a_mat[event_num][file_num]) == 2 || (file_num == 19 && event_num == 1))
		// pauses have not marked been marked for this recording 
		// also not for this one trace which I tried to pause mark, so it has a peak_0a,
		// but was not included in the final dataset because the growth speeds were too fast
		// to be realistic
		
		print("Pause marking not performed for this recording (" + filenames[file_num] + ", event " + num2str(event_num) + ")")
	else
		variable i=0  
  		variable vel_fits_end, vel_fits_start
		variable a1,a2,b1,b2,c1,c2
	    variable j
  		variable increment = .005 // time increment for in vitro data [s]
  		variable point_window = time_interval/increment // number of points per time window  
  		wave sR,Ta,W_coef
   		make/o/n=(Ta[event_num]/increment-point_window) vel_fits
  
 		for(j=0;j<numpnts(vel_fits);j++)
    		CurveFit/Q line sR [j,(j+point_window)]
    		vel_fits[j] = W_coef[1]/.005
 		endfor
 		
		a1 = Peak_0a_mat[event_num][file_num]
		a2 = Peak_1a_mat[event_num][file_num]
		b1 = Peak_0b_mat[event_num][file_num]
		b2 = Peak_1b_mat[event_num][file_num]
		c1 = abs(Peak_0c_mat[event_num][file_num]/sqrt(2))
		c2 = abs(Peak_1c_mat[event_num][file_num]/sqrt(2))

		variable minduration = 1
		variable vthresh
		
		if(numtype(Peak_1a_mat[event_num][file_num]) != 2) // second peak exists
			vthresh = find_gauss_intersection_easy_view(a1,a2,b1,b2,c1,c2)
			if(numtype(vthresh) == 2) // if vthresh is nan, which means that there is no intersection between the two gausses
				vthresh = (b1+b2)/2
			endif
			if(vthresh < 1)
				vthresh = 1 //minimum vthresh is 1
			endif
		else
			// if a second peak doesn't exist 
			vthresh = 1
		endif
		
   		findlevels/q/edge=0 vel_fits, vthresh
   		 // find times of pause exits and entries
  		wave w_findlevels
   	
   		if(numpnts(w_findlevels) != 0)
   			w_findlevels *= .005
   			w_findlevels += StartTime[event_num] + time_interval/2
   			make/o/n=(numpnts(w_findlevels)+2) alltimes,pauseflag // waves to add shading of pauses on vel trace
   	
   			do // alltimes will include all the pause entry and exit times
        		alltimes[i+1] = w_findlevels[i]
        		i+=1
      		while(i<numpnts(w_findlevels))
		
		else
			make/o/n=(2) alltimes,pauseflag
     	endif
     	
        i=0
        variable dumnum=0
        alltimes[0]=StartTime[event_num] + time_interval/2 // alltimes also includes the start of the trace
   		pauseflag=0 // initialize to zeros
        	
  		if(numtype(CatTime[event_num]) == 2) // catt will be NaN if no transition is marked
     		dumnum=EndTime[event_num] // fit up to the end of the event
  		else
    		dumnum=CatTime[event_num]  // catt is a real number, so fit up until catastrophe
   	 		if(numtype(PauseTime[event_num]) != 2)
   	 			dumnum -= (CatTime[event_num] - PauseTime[event_num])
   	 		endif
   		endif
        	
   		alltimes[numpnts(alltimes)-1]=dumnum - time_interval/2 // alltimes also includes the end of the velocity trace        
   		make/o/n=(numpnts(alltimes)-1) intervals,velavgs // waves for time intervals and corresponding average vels
   		intervals=alltimes[p+1]-alltimes[p]  // fill intervals wave from alltimes
   		do // sequentially search for and remove intervals that are too small
     		if (intervals[i]<minduration) // interval is less than minimum duration
        		if (i==0)
       			alltimes[i+1]=NaN
        		else
     				if (i==(numpnts(intervals)-1))
        				alltimes[i]=NaN
     				else
        				alltimes[i]=NaN
        				alltimes[i+1]=NaN
     				endif
     			endif
     			extract/o alltimes,alltimes,(numtype(alltimes)==0) // strip NaNs
     			make/o/n=(numpnts(alltimes)-1) intervals,velavgs // remake intervals and velavg waves
     			intervals=alltimes[p+1]-alltimes[p] // refill intervals wave from alltimes
        		i=-1 // this forces the search to start again if any too-small intervals have been found and removed  
      		else // interval is greater than or equal to minimum duration
         		vel_fits_start = (alltimes[i] - time_interval/2 - StartTime[event_num])/.005
         		vel_fits_end = (alltimes[i+1] - time_interval/2 - StartTime[event_num])/.005
       			velavgs[i]=mean(vel_fits,vel_fits_start,vel_fits_end)  // compute average velocity for the interval
      		endif
        		i+=1
   		while(i<numpnts(intervals))
        
        if(numpnts(intervals)<2) // there is only one interval, so no crossings were found
        	pauseflag = 0
        else // there is more than one interval, so at least one crossing was found
          extract/o velavgs,evenvelavgs,(mod(p,2)==0) // extract velocity avgs for even-numbered intervals
          extract/o velavgs,oddvelavgs,(mod(p,2)!=0) // who are you calling odd????
          if(mean(evenvelavgs) < vthresh) // trace began in pause state
            pauseflag=mod(p+1,2)
          else // trace began in run state
            pauseflag=mod(p,2)
          endif
                    
          make/o/n=(numpnts(vel_fits)) timewave_vel
  	 	  timewave_vel = .005*x+time_interval/2
  	 	  alltimes -= StartTime[event_num]
          
          DoWindow/K/Z TipVel
          display/W=(35,300,430,500) vel_fits vs timewave_vel
          appendtograph/r pauseflag vs alltimes
          ModifyGraph mode(pauseflag)=5,hbfill(pauseflag)=2,toMode(pauseflag)=1,rgb(pauseflag)=(51664,44236,58982),barStrokeRGB(pauseflag)=(51664,44236,58982)
          ModifyGraph fSize=8
          ModifyGraph btLen=4
          ModifyGraph axisOnTop=1
          Label right "Pauseflag"
          Label left "Growth speed [nm/s]"
          ReorderTraces vel_fits,{pauseflag}
          DoWindow/C $"TipVel"
                    
          dowindow/F 'TipPosition'
          removefromgraph/Z pauseflag
          appendtograph/r pauseflag vs alltimes
          ModifyGraph mode(pauseflag)=5,hbfill(pauseflag)=2,toMode(pauseflag)=1,rgb(pauseflag)=(51664,44236,58982),barStrokeRGB(pauseflag)=(51664,44236,58982)
          ReorderTraces sR,{pauseflag}
        endif  	
	endif
end
//----------------------------------------------------------------------
function reanalyze_fc_trace()
	wave time_limit,event_num,StartTime,EndTime
	time_limit[0] = (EndTime[event_num[0]] - StartTime[event_num[0]])/.005
	execute "FitEvent_reduced()"
end

//----------------------------------------------------
macro FitEvent_reduced()
  silent 1; pauseupdate
  variable startt,pauset,catt,endt,dumnum
  variable time_interval = 2
  
  startt = StartTime[event_num[0]]/.005
  pauset = PauseTime[event_num[0]]/.005
  catt = CatTime[event_num[0]]/.005
  endt = EndTime[event_num[0]]/.005
  
  // create cropped stage pos waves for event i, remove offsets
  duplicate /o/r=(startt,endt) sX,sXi // stage x pos
  duplicate /o/r=(startt,endt) sY,sYi // stage y pos
  duplicate /o/r=(startt,endt) sY,sR  // stage radial distance
  dumnum=sXi[0]
  sXi-=dumnum // subtracts initial x pos, so stage pos is relative to start of event
  dumnum=sYi[0]
  sYi-=dumnum // subtracts initial y pos

  // create cropped bead-trap sep and force waves for event i
  duplicate /o/r=(StartTime[0],EndTime[0]) bX,bX0 // bead x pos for event 0, assumed to be unloaded
  duplicate /o/r=(StartTime[0],EndTime[0]) bY,bY0 // bead y pos for event 0
  duplicate /o/r=(startt,endt) bX,bXi // bead x pos for current event
  duplicate /o/r=(startt,endt) bY,bYi // bead y pos for current event
  duplicate /o/r=(startt,endt) bY,Fi // total force for current event
  duplicate /o/r=(startt,endt) bY,sFi // total force for current event
  duplicate /o bXi,sepX // temporary wave for  bead-trap sep or force along x
  duplicate /o bYi,sepY // temporary wave for bead-trap sep or force along y
  
  sepX*=kx[0] // conversion to force using stored trap stiffness in x
  sepY*=ky[0] // conversion to force using stored trap stiffness in y
    
 // store mean force values
 
 variable Fx,Fy,thetaF,thetaS
 wavestats/q sepX
 Fx = V_avg
 wavestats/q sepY
 Fy = V_avg
 thetaF = atan2(Fy,Fx)*180/PI
 
 // compute angle of stage movement
 CurveFit/Q line sYi /X=sXi // note that this fit can puke if the stage move is perfectly vertical
 if (numtype(W_coef[1]) == 2) // if curvefit pukes
   thetaS = 90 // then assume stage moves are perfectly vertical
 else
   thetaS = atan(W_coef[1])*180/PI // otherwise compute arctan of slope (note that direction is ambiguous here)
 endif
 If (abs(thetaS+180-thetaF) < abs(thetaS-thetaF)) // pick direction closest to direction of force
   thetaS+=180
 else
   If (abs(thetaS-180-thetaF) < abs(thetaS-thetaF))
     thetaS-=180
   endif
 endif
   
  // compute projections along the direction of clamping
   sR = rotX( sXi, sYi, (-1*thetaS) )
   Fi = rotX( sepX, sepY, (-1*thetaS) )

  Killwaves sepX,sepY										
end

//----------------------------------------------------------------

function find_gauss_intersection_easy_view(a1,a2,b1,b2,c1,c2)
	variable a1,a2,b1,b2,c1,c2

	variable a = c2^2 - c1^2
	variable b = -2*b1*c2^2+2*b2*c1^2
	variable c = -b2^2*c1^2+b1^2*c2^2-2*c1^2*c2^2*ln(a1/a2)
	
	variable root1 = (-b + sqrt(b^2-4*a*c))/(2*a)
	variable root2 = (-b - sqrt(b^2-4*a*c))/(2*a)
	
	if(c2>c1) // peak 2 is wider
		return(max(root1,root2))
	else // peak 1 is wider
		return(min(root1,root2))
	endif

end

//---------------------------------------------------------------------
function translate_term_FC()
	wave term,event_num
	make/o/t/n=(1) term_translated
	
	 // store termination type
    if(term[event_num[0]] == 0) // detach 
    	term_translated[0] = "detach"
    elseif(term[event_num[0]] == 1) // rescue
    	term_translated[0] = "rescue"
    elseif(term[event_num[0]] == 2) // interrupted
    	term_translated[0] = "interrupted"
    elseif(numtype(term[event_num[0]]) == 2) // Nan
  	 	term_translated[0] = "other"
  	endif
  	 
end